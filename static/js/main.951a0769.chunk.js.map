{"version":3,"sources":["utils/initialHotels.js","components/Card.js","components/Packages.js","App.jsx","serviceWorker.js","index.jsx"],"names":["initialHotels","image","starsNumber","name","description","adress","guestNumber","roomNumber","oldPrice","newPrice","Card","props","className","src","alt","Packeges","console","log","map","card","App","Packages","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yPAAaA,G,UAAgB,CAC3B,CACEC,MAAM,wBACNC,YAAa,IACbC,KAAO,mBACPC,YAAa,aACbC,OAAQ,+BACRC,YAAa,aACbC,WAAY,WACZC,SAAU,QACVC,SAAU,QAEZ,CACER,MAAO,wBACPC,YAAa,IACbC,KAAM,kBACNC,YAAa,aACbC,OAAQ,+BACRC,YAAa,aACbC,WAAY,WACZC,SAAU,OACVC,SAAU,QAEZ,CACER,MAAO,wBACPC,YAAa,IACbC,KAAM,eACNC,YAAa,aACbC,OAAQ,+BACRC,YAAa,aACbC,WAAY,WACZC,SAAU,QACVC,SAAU,QAEZ,CACER,MAAO,wBACPC,YAAa,IACbC,KAAM,eACNC,YAAa,aACbC,OAAQ,+BACRC,YAAa,aACbC,WAAY,WACZC,SAAU,QACVC,SAAU,SAEZ,CACER,MAAO,wBACPC,YAAa,IACbC,KAAM,eACNC,YAAa,aACbC,OAAQ,+BACRC,YAAa,aACbC,WAAY,WACZC,SAAU,OACVC,SAAU,QAEZ,CACER,MAAO,wBACPC,YAAa,IACbC,KAAM,kBACNC,YAAa,aACbC,OAAQ,+BACRC,YAAa,aACbC,WAAY,WACZC,SAAU,OACVC,SAAU,UCxBCC,MAvCf,SAAcC,GAAO,IACZV,EAAoEU,EAApEV,MAAOE,EAA6DQ,EAA7DR,KAAME,EAAuDM,EAAvDN,OAAQC,EAA+CK,EAA/CL,YAAaC,EAAkCI,EAAlCJ,WAAYC,EAAsBG,EAAtBH,SAAUC,EAAYE,EAAZF,SAC/D,OACE,yBAAKG,UAAU,QACb,yBAAKC,IAAKZ,EAAOa,IAAI,OAAOF,UAAU,kBACtC,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,yBACZT,GAEH,yBAAKS,UAAU,6BACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,yBACf,yBAAKA,UAAU,4BACZP,IAGL,yBAAKO,UAAU,aACb,yBAAKA,UAAU,2BACf,yBAAKA,UAAU,4BACZN,IAGL,yBAAKM,UAAU,aACb,yBAAKA,UAAU,0BACf,yBAAKA,UAAU,4BACZL,KAIP,yBAAKK,UAAU,4BAAf,KAA6CJ,GAC7C,yBAAKI,UAAU,4BAAf,KAA6CH,GAC7C,4BAAQG,UAAU,eAAlB,eChBOG,MAbf,WAEE,OADAC,QAAQC,IAAI,CAACjB,kBAEX,6BAASY,UAAU,YACjB,wBAAIA,UAAU,mBAAd,kBACA,wBAAIA,UAAU,mBAEXZ,EAAckB,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAASA,SCI9BC,MAXf,WACE,OACE,yBAAKR,UAAU,QACb,4BAAQA,UAAU,UAAlB,oDAGA,kBAACS,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.951a0769.chunk.js","sourcesContent":["export const initialHotels = [\r\n  {\r\n    image:'https://clck.ru/RPGFp',\r\n    starsNumber: '5',\r\n    name:  'Hotel Blue Haven',\r\n    description: 'Good hotel',\r\n    adress: '1749 Wheeler Ridge  Delaware',\r\n    guestNumber: '2 x Guests',\r\n    roomNumber: '1 x Room',\r\n    oldPrice: '10500',\r\n    newPrice: '8500',\r\n  },\r\n  {\r\n    image: 'https://clck.ru/RPG5n',\r\n    starsNumber: '5',\r\n    name: 'LUX* Belle Mare',\r\n    description: 'Good hotel',\r\n    adress: '1749 Wheeler Ridge  Delaware',\r\n    guestNumber: '4 x Guests',\r\n    roomNumber: '2 x Room',\r\n    oldPrice: '8500',\r\n    newPrice: '3000',\r\n  },\r\n  {\r\n    image: 'https://clck.ru/RPGAb',\r\n    starsNumber: '5',\r\n    name: 'White Palace',\r\n    description: 'Good hotel',\r\n    adress: '1749 Wheeler Ridge  Delaware',\r\n    guestNumber: '2 x Guests',\r\n    roomNumber: '1 x Room',\r\n    oldPrice: '10500',\r\n    newPrice: '9500',\r\n  },\r\n  {\r\n    image: 'https://clck.ru/RPGAb',\r\n    starsNumber: '5',\r\n    name: 'White Palace',\r\n    description: 'Good hotel',\r\n    adress: '1749 Wheeler Ridge  Delaware',\r\n    guestNumber: '1 x Guests',\r\n    roomNumber: '1 x Room',\r\n    oldPrice: '12500',\r\n    newPrice: '10500',\r\n  },\r\n  {\r\n    image: 'https://clck.ru/RPGEZ',\r\n    starsNumber: '5',\r\n    name: 'Luxury Place',\r\n    description: 'Good hotel',\r\n    adress: '1749 Wheeler Ridge  Delaware',\r\n    guestNumber: '2 x Guests',\r\n    roomNumber: '1 x Room',\r\n    oldPrice: '4500',\r\n    newPrice: '2500',\r\n  },\r\n  {\r\n    image: 'https://clck.ru/RPGFp',\r\n    starsNumber: '5',\r\n    name: 'Hotel Five Star',\r\n    description: 'Good hotel',\r\n    adress: '1749 Wheeler Ridge  Delaware',\r\n    guestNumber: '2 x Guests',\r\n    roomNumber: '1 x Room',\r\n    oldPrice: '6500',\r\n    newPrice: '3500',\r\n  }\r\n]","import React from 'react';\r\n\r\nfunction Card(props){\r\n  const {image, name, adress, guestNumber, roomNumber, oldPrice, newPrice} = props;\r\n  return(\r\n    <div className=\"card\">\r\n      <img src={image} alt='text' className=\"card__up-part\"/>\r\n      <div className=\"card__down-part\">\r\n        <div className=\"card__down-part-title\">\r\n          {name}\r\n        </div>\r\n        <div className=\"card__down-part-container\">\r\n          <div className=\"room-info\">\r\n            <div className=\"picture picture__map\"/>\r\n            <div className=\"card__down-part-subtitle\">\r\n              {adress}\r\n            </div>\r\n          </div>\r\n          <div className=\"room-info\">\r\n            <div className=\"picture picture__guest\"/>\r\n            <div className=\"card__down-part-subtitle\">\r\n              {guestNumber}\r\n            </div>\r\n          </div>\r\n          <div className=\"room-info\">\r\n            <div className=\"picture picture__home\"/>\r\n            <div className=\"card__down-part-subtitle\">\r\n              {roomNumber}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"card__down-part-oldprice\">$ {oldPrice}</div>\r\n        <div className=\"card__down-part-newprice\">$ {newPrice}</div>\r\n        <button className=\"button-book\">\r\n          Book Now\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport {initialHotels} from '../utils/initialHotels';\r\nimport Card from './Card';\r\n\r\nfunction Packeges(){\r\n  console.log({initialHotels})\r\n  return(\r\n    <section className=\"packages\">\r\n      <h2 className=\"packages__title\">OTHER PACHEGES</h2>\r\n      <ul className=\"packages__cards\">\r\n        \r\n        {initialHotels.map(card => <Card {...card}/>)}\r\n      </ul>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Packeges;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Packages from './components/Packages'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"page\">\r\n      <header className=\"header\">\r\n      Questions? Need Help? Call us on (+123) 456 1500\r\n      </header>\r\n      <Packages/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\nserviceWorker.unregister();"],"sourceRoot":""}